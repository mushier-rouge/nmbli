generator client {
  provider      = "prisma-client-js"
  output        = "../src/generated/prisma"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String         @id @default(uuid())
  email     String         @unique
  role      UserRole
  name      String
  createdAt DateTime       @default(now())
  briefs    Brief[]
  dealers   Dealer[]       @relation("DealerOps")
  invites   DealerInvite[] @relation("InviteCreator")
}

model Brief {
  id                 String           @id @default(uuid())
  buyerId            String
  status             BriefStatus      @default(sourcing)
  zipcode            String
  paymentType        PaymentType
  maxOTD             Decimal          @db.Decimal(12, 2)
  makes              String[]
  models             String[]
  trims              String[]
  colors             String[]
  mustHaves          String[]
  timelinePreference String
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  paymentPreferences Json?            @default("[]")
  buyer              User             @relation(fields: [buyerId], references: [id])
  invites            DealerInvite[]
  dealerProspects    DealerProspect[]
  quotes             Quote[]
  timelineEvents     TimelineEvent[]
  skyvernRuns        SkyvernRun[]
  emailMessages      EmailMessage[]
  smsMessages        SmsMessage[]
}

model Dealer {
  id           String           @id @default(uuid())
  name         String
  city         String
  state        String
  contactName  String
  contactEmail String
  phone        String
  opsOwnerId   String?
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  opsOwner     User?            @relation("DealerOps", fields: [opsOwnerId], references: [id])
  invites      DealerInvite[]
  prospects    DealerProspect[]
  quotes       Quote[]
}

model DealerInvite {
  id             String            @id @default(uuid())
  briefId        String
  dealerId       String
  magicLinkToken String            @unique
  state          DealerInviteState @default(sent)
  expiresAt      DateTime
  lastViewedAt   DateTime?
  createdById    String?
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  brief          Brief             @relation(fields: [briefId], references: [id])
  createdBy      User?             @relation("InviteCreator", fields: [createdById], references: [id])
  dealer         Dealer            @relation(fields: [dealerId], references: [id])
  quotes         Quote[]
}

model DealerProspect {
  id              String               @id @default(uuid())
  briefId         String
  dealerId        String?
  name            String
  brand           String
  city            String?
  state           String?
  zipcode         String?
  address         String?
  phone           String?
  email           String?
  website         String?
  source          String?
  notes           String?
  driveHours      Float?
  distanceMiles   Float?
  status          DealerProspectStatus @default(pending)
  lastContactedAt DateTime?
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @default(now()) @updatedAt
  brief           Brief                @relation(fields: [briefId], references: [id], onDelete: Cascade)
  dealer          Dealer?              @relation(fields: [dealerId], references: [id])
}

model Quote {
  id              String          @id @default(uuid())
  briefId         String
  dealerId        String
  inviteId        String?
  status          QuoteStatus     @default(draft)
  vin             String?
  stockNumber     String?
  year            Int?
  make            String?
  model           String?
  trim            String?
  extColor        String?
  intColor        String?
  etaDate         DateTime?
  msrp            Decimal?        @db.Decimal(12, 2)
  dealerDiscount  Decimal?        @db.Decimal(12, 2)
  docFee          Decimal?        @db.Decimal(12, 2)
  dmvFee          Decimal?        @db.Decimal(12, 2)
  tireBatteryFee  Decimal?        @db.Decimal(12, 2)
  otherFeesTotal  Decimal?        @db.Decimal(12, 2)
  incentivesTotal Decimal?        @db.Decimal(12, 2)
  addonsTotal     Decimal?        @db.Decimal(12, 2)
  taxRate         Decimal?        @db.Decimal(5, 4)
  taxAmount       Decimal?        @db.Decimal(12, 2)
  otdTotal        Decimal?        @db.Decimal(12, 2)
  paymentType     PaymentType?
  aprOrMf         Decimal?        @db.Decimal(8, 4)
  termMonths      Int?
  dasAmount       Decimal?        @db.Decimal(12, 2)
  evidenceNote    String?
  paymentSnapshot Json?
  confirmations   Json?
  metadata        Json?
  confidence      Decimal?        @db.Decimal(4, 3)
  source          QuoteSource     @default(dealer_form)
  parentQuoteId   String?
  shadinessScore  Int             @default(0)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  contract        Contract?
  files           FileAsset[]
  brief           Brief           @relation(fields: [briefId], references: [id])
  dealer          Dealer          @relation(fields: [dealerId], references: [id])
  invite          DealerInvite?   @relation(fields: [inviteId], references: [id])
  parentQuote     Quote?          @relation("QuoteRevisions", fields: [parentQuoteId], references: [id])
  revisions       Quote[]         @relation("QuoteRevisions")
  lines           QuoteLine[]
  timelineEvents  TimelineEvent[]
}

model QuoteLine {
  id              String        @id @default(uuid())
  quoteId         String
  kind            QuoteLineKind
  name            String
  amount          Decimal       @db.Decimal(12, 2)
  approvedByBuyer Boolean       @default(false)
  quote           Quote         @relation(fields: [quoteId], references: [id])
}

model Contract {
  id         String         @id @default(uuid())
  quoteId    String         @unique
  status     ContractStatus @default(uploaded)
  checks     Json
  envelopeId String?
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  quote      Quote          @relation(fields: [quoteId], references: [id])
  files      FileAsset[]
}

model TimelineEvent {
  id        String            @id @default(uuid())
  briefId   String
  quoteId   String?
  type      TimelineEventType
  actor     TimelineActor
  payload   Json
  createdAt DateTime          @default(now())
  files     FileAsset[]
  brief     Brief             @relation(fields: [briefId], references: [id])
  quote     Quote?            @relation(fields: [quoteId], references: [id])
}

model FileAsset {
  id           String         @id @default(uuid())
  ownerType    FileOwnerType
  ownerId      String
  url          String
  mimeType     String
  originalName String
  size         Int
  checksum     String?
  createdAt    DateTime       @default(now())
  quoteId      String?
  timelineId   String?
  contractId   String?
  contract     Contract?      @relation(fields: [contractId], references: [id])
  quote        Quote?         @relation(fields: [quoteId], references: [id])
  timeline     TimelineEvent? @relation(fields: [timelineId], references: [id])
}

model DevInviteCode {
  id        String   @id
  code      String   @unique
  createdAt DateTime @default(now())
}

model InviteCode {
  id           String    @id @default(uuid())
  code         String    @unique
  usedAt       DateTime?
  usedByEmail  String?
  usedByUserId String?
  createdAt    DateTime  @default(now())

  @@index([code])
}

model Waitlist {
  id                String    @id @default(uuid())
  email             String    @unique
  verificationToken String?   @unique @default(uuid())
  verifiedAt        DateTime?
  createdAt         DateTime  @default(now())
  notifiedAt        DateTime?

  @@index([email])
  @@index([createdAt])
  @@index([verificationToken])
}

enum UserRole {
  buyer
  dealer
  ops
}

enum BriefStatus {
  sourcing
  offers
  negotiation
  contract
  done
}

enum PaymentType {
  cash
  finance
  lease
}

enum DealerInviteState {
  sent
  viewed
  submitted
  revised
  expired
}

enum DealerProspectStatus {
  pending
  contacted
  declined
}

enum QuoteStatus {
  draft
  published
  superseded
  accepted
  rejected
}

enum QuoteLineKind {
  incentive
  addon
  fee
}

enum QuoteSource {
  dealer_form
  email_parsed
}

enum ContractStatus {
  uploaded
  checked_ok
  mismatch
}

enum TimelineActor {
  buyer
  dealer
  ops
  system
}

enum TimelineEventType {
  brief_created
  dealer_invited
  invite_viewed
  quote_submitted
  quote_revised
  quote_published
  quote_accepted
  quote_rejected
  counter_sent
  counter_accepted
  contract_uploaded
  contract_checked
  contract_mismatch
  contract_pass
  completed
  automation_started
  dealer_contacted
}

enum FileOwnerType {
  quote
  contract
  timeline
}

// Dealer Automation Tables

model Dealership {
  id               String          @id @default(uuid())
  name             String
  make             String
  state            String
  city             String?
  address          String?
  zipcode          String?
  phone            String?
  website          String?
  email            String?
  discoveredAt     DateTime        @default(now())
  verified         Boolean         @default(false)
  lastContactedAt  DateTime?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  contacts         DealerContact[]
  skyvernRuns      SkyvernRun[]
  emailMessages    EmailMessage[]
  smsMessages      SmsMessage[]

  @@index([make, state])
  @@index([verified])
}

model DealerContact {
  id                      String         @id @default(uuid())
  dealershipId            String
  name                    String?
  email                   String         @unique
  phone                   String?
  role                    String         @default("sales")
  firstContactedAt        DateTime       @default(now())
  lastContactedAt         DateTime?
  totalInteractions       Int            @default(0)
  preferredContactMethod  String         @default("email")
  notes                   Json           @default("{}")
  createdAt               DateTime       @default(now())
  updatedAt               DateTime       @updatedAt
  dealership              Dealership     @relation(fields: [dealershipId], references: [id], onDelete: Cascade)
  emailMessages           EmailMessage[]
  smsMessages             SmsMessage[]

  @@index([email])
  @@index([dealershipId])
}

model SkyvernRun {
  id            String      @id @default(uuid())
  briefId       String
  dealershipId  String?
  workflowId    String?
  status        String      @default("pending")
  costCents     Int         @default(0)
  startedAt     DateTime    @default(now())
  completedAt   DateTime?
  result        Json?
  screenshots   Json?
  errorMessage  String?
  createdAt     DateTime    @default(now())
  brief         Brief       @relation(fields: [briefId], references: [id], onDelete: Cascade)
  dealership    Dealership? @relation(fields: [dealershipId], references: [id], onDelete: SetNull)

  @@index([briefId])
  @@index([status])
}

model EmailMessage {
  id             String         @id @default(uuid())
  briefId        String
  dealershipId   String?
  contactId      String?
  direction      String
  toEmail        String?
  fromEmail      String?
  subject        String?
  bodyHtml       String?
  status         String         @default("sent")
  sentAt         DateTime       @default(now())
  gmailMessageId String?
  createdAt      DateTime       @default(now())
  brief          Brief          @relation(fields: [briefId], references: [id], onDelete: Cascade)
  dealership     Dealership?    @relation(fields: [dealershipId], references: [id], onDelete: SetNull)
  contact        DealerContact? @relation(fields: [contactId], references: [id], onDelete: SetNull)

  @@index([briefId])
}

model SmsMessage {
  id           String         @id @default(uuid())
  briefId      String
  dealershipId String?
  contactId    String?
  direction    String
  toNumber     String?
  fromNumber   String?
  body         String?
  status       String         @default("sent")
  costCents    Int            @default(0)
  sentAt       DateTime       @default(now())
  twilioSid    String?
  createdAt    DateTime       @default(now())
  brief        Brief          @relation(fields: [briefId], references: [id], onDelete: Cascade)
  dealership   Dealership?    @relation(fields: [dealershipId], references: [id], onDelete: SetNull)
  contact      DealerContact? @relation(fields: [contactId], references: [id], onDelete: SetNull)

  @@index([briefId])
  @@index([direction])
}
